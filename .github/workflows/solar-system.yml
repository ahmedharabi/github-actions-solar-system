name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

jobs:
  unit-testing:
    continue-on-error: true
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        run: npm test

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result
          path: test-results.xml

  code-coverage: 
    name: Code Coverage
    runs-on: ubuntu-latest
    container:
      image: node:20
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install

      - name: Generate Code Coverage
        run: npm run code-coverage
        continue-on-error: true

      - name: Upload Code Coverage
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [code-coverage]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

  dev-deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: docker
    environment: 
      name: development
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.28.1

      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Show Kubernetes Version
        run: kubectl version -o yaml
